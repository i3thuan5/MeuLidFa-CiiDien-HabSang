#
# Build a minimal docker image for a static go binary.
# See README.md for a full description.
#

meta:
  project: HagFa-WaveRNN

env=sadtin:
  variables:
  - BANBUN=ciidien-20190516
  - NGINGIEN={env.NGINGIEN:MeuLid}
  - VUN_MIONGZII=https://github.com/i3thuan5/moe-hakkadict/archive/refs/heads/main.zip
  - SANG_MIONGZII=https://www.dropbox.com/s/dy7608vuhm45bog/moe-hakka-sound.tar?dl=0
  - PIN=16k
  - THREAD=4
  - KU={env.KU:kiung ha loiˇ liau dong senˊ qi.}

alias=hazoi-ngiliau:
  tasks: [sadtin, hazoi-ngiliau-job]

alias=zon-bienma:
  tasks: [sadtin, zon-bienma-job]

alias=preprocess-tacotron:
  tasks: [sadtin, preprocess-tacotron-job, ]

alias=tacotron:
  tasks: [sadtin, tacotron-job, ]

alias=tacotron-gta:
  tasks: [sadtin, tacotron-gta-job, ]

alias=habsang-griffinlim:
  tasks: [sadtin, habsang-griffinlim-job, ]

alias=preprocess-wavernn:
  tasks: [sadtin, preprocess-wavernn-job, ]

alias=wavernn:
  tasks: [sadtin, wavernn-job, ]

alias=habsang:
  tasks: [sadtin, habsang-griffinlim-job, habsang-wavernn-job, ]

mount=pun_ngiliau:
  bind: ./1-{env.BANBUN}/
  path: /pun_ngiliau/

mount=zon_ngiliau:
  bind: ./2-{env.BANBUN}-{env.PIN}/
  path: /zon_ngiliau/

mount=camsu:
  bind: ./camsu/
  path: /camsu/
  read-only: true

mount=data:
  bind: ./3-{env.BANBUN}-{env.PIN}-{env.NGINGIEN}-data/
  path: /data/

mount=checkpoints:
  bind: ./4-{env.BANBUN}-{env.PIN}-{env.NGINGIEN}-checkpoints/
  path: /WaveRNN/checkpoints/

mount=outputs:
  bind: ./5-{env.BANBUN}-{env.PIN}-{env.NGINGIEN}-model_outputs/
  path: /WaveRNN/model_outputs/

image=ubuntu:
  image: ubuntu
  tags: ['20.04']
  pull: once

job=hazoi-ngiliau-job:
  use: ubuntu
  env:
  - BANBUN={env.BANBUN}
  - VUN_MIONGZII={env.VUN_MIONGZII}
  - SANG_MIONGZII={env.SANG_MIONGZII}
  - LANG=C.UTF-8
  - LANGUAGE=C.UTF-8
  - LC_ALL=C.UTF-8
  command: |
    bash -eux -c '
      apt-get update
      apt-get install -y wget unzip
      wget -O bun.zip $VUN_MIONGZII
      unzip -o -O utf-8 bun.zip -d /pun_ngiliau
      wget -O - $SANG_MIONGZII | tar -xvf - -C /pun_ngiliau
    '
  mounts: [pun_ngiliau, ]

job=zon-bienma-job:
  use: ubuntu
  env:
  - BANBUN={env.BANBUN}
  - PIN={env.PIN}
  - THREAD={env.THREAD}
  command: |
    bash -eux -c '
      apt-get update
      apt-get install -y ffmpeg sox
      cp -r moe-hakkadict-main /zon_ngiliau/
      mkdir -p /qiamsii/corpus /zon_ngiliau/corpus
      find . -type d -exec mkdir -p /qiamsii/{} \;
      find . -type d -exec mkdir -p /zon_ngiliau/{} \;
      find . -name "*.mp3" -print0 | \
        xargs -0 -L 1 -P $THREAD -I{} ffmpeg -i {} -c:a pcm_s16le -ac 1 -ar $PIN /qiamsii/{}.wav
      find /qiamsii/ -type f -empty -delete
      find . -name "*.mp3" -print0 | \
        xargs -0 -L 1 -P $THREAD -I{} sox /qiamsii/{}.wav /zon_ngiliau/{}.wav silence 1 0.1 0.1% reverse silence 1 0.1 0.1% reverse
      find /zon_ngiliau/corpus/ -size -1000c -delete
    '
  mounts: [pun_ngiliau, zon_ngiliau, ]
  working-dir: /pun_ngiliau

image=hiunlien-kuangin:
  image: hiunlien-kuangin
  context: hiunlien-kuangin

job=preprocess-tacotron-job:
  use: hiunlien-kuangin
  env:
  - BANBUN={env.BANBUN}
  - NGINGIEN={env.NGINGIEN}
  - PIN={env.PIN}
  command: |
    bash -eux -c '
      cp /camsu/hparams.py .
      cp /camsu/preprocess-tacotron.py .
      cp /camsu/text_init.py utils/text/__init__.py
      cp /camsu/text_symbols.py utils/text/symbols.py
      python preprocess-tacotron.py --path /zon_ngiliau/
    '
  mounts: [zon_ngiliau, camsu, data, ]

job=tacotron-job:
  use: hiunlien-kuangin
  env:
  - BANBUN={env.BANBUN}
  - NGINGIEN={env.NGINGIEN}
  - CUDA_VISIBLE_DEVICES=0
  command: |
    bash -eux -c '
      cp /camsu/hparams.py .
      cp /camsu/text_init.py utils/text/__init__.py
      cp /camsu/text_symbols.py utils/text/symbols.py
      python train_tacotron.py
    '
  mounts: [camsu, data, checkpoints, ]

job=tacotron-gta-job:
  use: hiunlien-kuangin
  env:
  - BANBUN={env.BANBUN}
  - NGINGIEN={env.NGINGIEN}
  - CUDA_VISIBLE_DEVICES=0
  command: |
    bash -eux -c '
      cp /camsu/hparams.py .
      cp /camsu/text_init.py utils/text/__init__.py
      cp /camsu/text_symbols.py utils/text/symbols.py
      python train_tacotron.py --force_gta
    '
  mounts: [camsu, data, checkpoints, ]

job=preprocess-wavernn-job:
  use: hiunlien-kuangin
  env:
  - BANBUN={env.BANBUN}
  - NGINGIEN={env.NGINGIEN}
  command: |
    bash -eux -c '
      cp /camsu/hparams.py .
      cp /camsu/preprocess-wavernn.py .
      find /data/gta/ -size -5000c -delete
      python preprocess-wavernn.py --path /data/gta/
    '
  mounts: [camsu, data, ]

job=wavernn-job:
  use: hiunlien-kuangin
  env:
  - BANBUN={env.BANBUN}
  - NGINGIEN={env.NGINGIEN}
  - CUDA_VISIBLE_DEVICES=0
  command: |
    bash -eux -c '
      cp /camsu/hparams.py .
      cp /camsu/text_init.py utils/text/__init__.py
      cp /camsu/text_symbols.py utils/text/symbols.py
      sed -i "s/dataset.pkl/dataset_wavernn.pkl/g" utils/dataset.py
      python train_wavernn.py --gta
    '
  mounts: [camsu, data, checkpoints, outputs, ]

job=habsang-griffinlim-job:
  use: hiunlien-kuangin
  env:
  - KU={env.KU}
  - BANBUN={env.BANBUN}
  - NGINGIEN={env.NGINGIEN}
  - CUDA_VISIBLE_DEVICES=1
  command: |
    bash -eux -c '
      cp /camsu/hparams.py .
      cp /camsu/text_init.py utils/text/__init__.py
      cp /camsu/text_symbols.py utils/text/symbols.py
      sed -i "s/required=True, //g" gen_tacotron.py
      time python gen_tacotron.py --input_text "$KU" griffinlim
    '
  mounts: [camsu, checkpoints, outputs, ]

job=habsang-wavernn-job:
  use: hiunlien-kuangin
  env:
  - KU={env.KU}
  - BANBUN={env.BANBUN}
  - NGINGIEN={env.NGINGIEN}
  - CUDA_VISIBLE_DEVICES=1
  command: |
    bash -eux -c '
      cp /camsu/hparams.py .
      cp /camsu/text_init.py utils/text/__init__.py
      cp /camsu/text_symbols.py utils/text/symbols.py
      sed -i "s/required=True, //g" gen_tacotron.py
      time python gen_tacotron.py --input_text "$KU" wavernn
      time python gen_tacotron.py --input_text "$KU" wavernn --unbatched
    '
  mounts: [camsu, checkpoints, outputs, ]
